--
-- Script was generated by Devart dbForge Studio for SQL Server, Version 6.6.5.0
-- Product home page: http://www.devart.com/dbforge/sql/studio
-- Script date 7/18/2024 11:46:23 AM
-- Server version: 16.00.1000
--


SET DATEFORMAT ymd
SET ARITHABORT, ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER, ANSI_NULLS, NOCOUNT ON
SET NUMERIC_ROUNDABORT, IMPLICIT_TRANSACTIONS, XACT_ABORT OFF
GO

USE Project
GO

IF DB_NAME() <> N'Project' SET NOEXEC ON
GO

--
-- Create table [dbo].[Supplier]
--
PRINT (N'Create table [dbo].[Supplier]')
GO
CREATE TABLE dbo.Supplier (
  supplier_id int NOT NULL,
  name nvarchar(255) NOT NULL,
  birth_date date NOT NULL,
  address nvarchar(max) NULL,
  email varchar(255) NULL,
  phone_number varchar(255) NULL,
  PRIMARY KEY CLUSTERED (supplier_id),
  UNIQUE (phone_number),
  UNIQUE (email)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[Sales_Assistant]
--
PRINT (N'Create table [dbo].[Sales_Assistant]')
GO
CREATE TABLE dbo.Sales_Assistant (
  staff_id int NOT NULL,
  fname nvarchar(max) NOT NULL,
  lname nvarchar(max) NOT NULL,
  salary int NOT NULL,
  birth_date date NOT NULL,
  address nvarchar(max) NULL,
  GEnder varchar(max) NOT NULL,
  email varchar(max) NULL,
  phoneNumber nvarchar(max) NOT NULL,
  PRIMARY KEY CLUSTERED (staff_id)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[Purchase_Assistant]
--
PRINT (N'Create table [dbo].[Purchase_Assistant]')
GO
CREATE TABLE dbo.Purchase_Assistant (
  staff_id int NOT NULL,
  fname nvarchar(max) NOT NULL,
  lname nvarchar(max) NOT NULL,
  salary int NOT NULL,
  birth_date date NOT NULL,
  address nvarchar(max) NULL,
  gender varchar(max) NOT NULL,
  email varchar(max) NULL,
  phoneNumber nvarchar(max) NOT NULL,
  PRIMARY KEY CLUSTERED (staff_id)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[Product]
--
PRINT (N'Create table [dbo].[Product]')
GO
CREATE TABLE dbo.Product (
  product_id int NOT NULL,
  price int NOT NULL,
  production_date date NOT NULL,
  name varchar(max) NOT NULL,
  product_type varchar(max) NOT NULL,
  glue_type varchar(max) NULL,
  color_type varchar(max) NULL,
  expiration_date date NULL,
  PRIMARY KEY CLUSTERED (product_id)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[Customer]
--
PRINT (N'Create table [dbo].[Customer]')
GO
CREATE TABLE dbo.Customer (
  customer_id int NOT NULL,
  fname nvarchar(255) NOT NULL,
  lname nvarchar(255) NOT NULL,
  customer_address nvarchar(max) NULL,
  GEnder varchar(max) NOT NULL,
  email varchar(255) NULL,
  phoneNumber varchar(255) NULL,
  PRIMARY KEY CLUSTERED (customer_id),
  UNIQUE (phoneNumber),
  UNIQUE (email)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO

--
-- Create or alter procedure [dbo].[TASK51]
--
GO
PRINT (N'Create or alter procedure [dbo].[TASK51]')
GO

CREATE OR ALTER PROCEDURE dbo.TASK51 
AS
  BEGIN

    --------------------------------------------------------- SECTION 2 -------------------------------------------------------------

    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (1, 'Jennifer', 'Smith', '123 Main St, Cityville', 'F', 'j.smith@example.com', '123-456-7890');
  
    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (2, 'Michael', 'Johnson', '456 Elm St, Townsville', 'M', 'm.johnson@example.com', '987-654-3210');
    
    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (3, 'Stephanie', 'Brown', '789 Oak St, Villageton', 'F', 's.brown@example.com', '111-222-3333');
    
    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (4, 'Christopher', 'Lee', '101 Pine St, Hamletville', 'M', 'c.lee@example.com', '444-555-6666');
    
    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (5, 'Amanda', 'Garcia', '555 Maple St, Riverside', 'F', 'a.garcia@example.com', '777-888-9999');
    
    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (6, 'Matthew', 'Martinez', '777 Cedar St, Hilltop', 'M', 'm.martinez@example.com', '123-789-4560');

    --------------------------------------------------------- SECTION 3 -------------------------------------------------------------

    SELECT c.fname AS [Before Update] FROM Customer c; 
    
    UPDATE Customer
    SET fname = CONCAT(LEFT(fname, 2), SUBSTRING('(updated been has column this)', 2, 7));

    SELECT c.fname AS [After Update] FROM Customer c; 
    
    --------------------------------------------------------- SECTION 3 -------------------------------------------------------------

    CREATE TABLE TASK51Logs (
        id INT PRIMARY KEY IDENTITY,
        logdate DATETIME2,
        content VARCHAR(256)
    );

    --------------------------------------------------------- SECTION 4 -------------------------------------------------------------

    DECLARE @UpdatedRowsCount INT;
    
    UPDATE Customer
    SET FName = '-'
    WHERE FName LIKE '%updated%';
    
    SET @UpdatedRowsCount = @@ROWCOUNT;
    
    DELETE FROM Customer
    WHERE FName = '-';
    
    DECLARE @CurrentUser NVARCHAR(100);
    SET @CurrentUser = SUSER_SNAME();
    
    DECLARE @CurrentDateTime DATETIME2 = GETDATE();
    
    INSERT INTO TASK51Logs (logdate, content)
    VALUES (@CurrentDateTime, 'User: ' + @CurrentUser + '. Number of rows where "updated" was found and deleted: ' + CAST(@UpdatedRowsCount AS VARCHAR(10)));

    SELECT * FROM TASK51Logs tl;

    --------------------------------------------------------- TEAR DOWN -------------------------------------------------------------
    DELETE FROM Customer;
    DROP TABLE TASK51Logs;
  END
GO

--
-- Create user [Zhakav]
--
PRINT (N'Create user [Zhakav]')
GO
CREATE USER Zhakav
  FOR LOGIN Zhakav
GO

--
-- Create user [dblab]
--
PRINT (N'Create user [dblab]')
GO
CREATE USER dblab
  FOR LOGIN dblab
GO

--
-- Create table [dbo].[Shop_Order]
--
PRINT (N'Create table [dbo].[Shop_Order]')
GO
CREATE TABLE dbo.Shop_Order (
  sorder_id int NOT NULL,
  order_date datetime2 NULL,
  total_amount int NOT NULL,
  supplier_id int NOT NULL,
  staff_id int NOT NULL,
  PRIMARY KEY CLUSTERED (sorder_id)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[Shop_Contain]
--
PRINT (N'Create table [dbo].[Shop_Contain]')
GO
CREATE TABLE dbo.Shop_Contain (
  product_id int NOT NULL,
  sorder_id int NOT NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[Customer_Order]
--
PRINT (N'Create table [dbo].[Customer_Order]')
GO
CREATE TABLE dbo.Customer_Order (
  corder_id int NOT NULL,
  order_date datetime2 NOT NULL,
  total_amount int NOT NULL,
  customer_id int NOT NULL,
  staff_id int NOT NULL,
  PRIMARY KEY CLUSTERED (corder_id)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[Customer_Contain]
--
PRINT (N'Create table [dbo].[Customer_Contain]')
GO
CREATE TABLE dbo.Customer_Contain (
  product_id int NOT NULL,
  corder_id int NOT NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[TASK52]
--
GO
PRINT (N'Create or alter procedure [dbo].[TASK52]')
GO
CREATE OR ALTER PROCEDURE dbo.TASK52
AS
BEGIN

  CREATE TABLE Task52User (
    ID INT PRIMARY KEY IDENTITY,
    username VARCHAR(256),
    password VARBINARY(MAX)
  );


  INSERT INTO Task52User (username, password)
  VALUES ('user1', ENCRYPTBYPASSPHRASE('Passphrase', 'password1')),
         ('user2', ENCRYPTBYPASSPHRASE('Passphrase', 'password2')),
         ('user3', ENCRYPTBYPASSPHRASE('Passphrase', 'password3'));

  SELECT * FROM Task52User tu;

  EXEC('CREATE VIEW viewtask52
    WITH ENCRYPTION
    AS
    SELECT ID, username, CONVERT(VARCHAR(MAX), DECRYPTBYPASSPHRASE(''Passphrase'', password)) AS decrypted_password
    FROM Task52User;');

  SELECT * FROM viewtask52;

  DROP TABLE Task52User;
  DROP VIEW viewtask52;

END
GO

-- 
-- Dumping data for table Supplier
--
PRINT (N'Dumping data for table Supplier')
-- Table Project.dbo.Supplier does not contain any data (it is empty)

-- 
-- Dumping data for table Shop_Order
--
PRINT (N'Dumping data for table Shop_Order')
-- Table Project.dbo.Shop_Order does not contain any data (it is empty)

-- 
-- Dumping data for table Shop_Contain
--
PRINT (N'Dumping data for table Shop_Contain')
-- Table Project.dbo.Shop_Contain does not contain any data (it is empty)

-- 
-- Dumping data for table Sales_Assistant
--
PRINT (N'Dumping data for table Sales_Assistant')
-- Table Project.dbo.Sales_Assistant does not contain any data (it is empty)

-- 
-- Dumping data for table Purchase_Assistant
--
PRINT (N'Dumping data for table Purchase_Assistant')
-- Table Project.dbo.Purchase_Assistant does not contain any data (it is empty)

-- 
-- Dumping data for table Product
--
PRINT (N'Dumping data for table Product')
-- Table Project.dbo.Product does not contain any data (it is empty)

-- 
-- Dumping data for table Customer_Order
--
PRINT (N'Dumping data for table Customer_Order')
-- Table Project.dbo.Customer_Order does not contain any data (it is empty)

-- 
-- Dumping data for table Customer_Contain
--
PRINT (N'Dumping data for table Customer_Contain')
-- Table Project.dbo.Customer_Contain does not contain any data (it is empty)

-- 
-- Dumping data for table Customer
--
PRINT (N'Dumping data for table Customer')
-- Table Project.dbo.Customer does not contain any data (it is empty)

USE Project
GO

IF DB_NAME() <> N'Project' SET NOEXEC ON
GO

--
-- Create foreign key [fk3] on table [dbo].[Shop_Order]
--
PRINT (N'Create foreign key [fk3] on table [dbo].[Shop_Order]')
GO
ALTER TABLE dbo.Shop_Order
  ADD CONSTRAINT fk3 FOREIGN KEY (staff_id) REFERENCES dbo.Purchase_Assistant (staff_id)
GO

--
-- Create foreign key [fk4] on table [dbo].[Shop_Order]
--
PRINT (N'Create foreign key [fk4] on table [dbo].[Shop_Order]')
GO
ALTER TABLE dbo.Shop_Order
  ADD CONSTRAINT fk4 FOREIGN KEY (supplier_id) REFERENCES dbo.Supplier (supplier_id)
GO

--
-- Create foreign key [fk5] on table [dbo].[Shop_Contain]
--
PRINT (N'Create foreign key [fk5] on table [dbo].[Shop_Contain]')
GO
ALTER TABLE dbo.Shop_Contain
  ADD CONSTRAINT fk5 FOREIGN KEY (product_id) REFERENCES dbo.Product (product_id)
GO

--
-- Create foreign key [fk7] on table [dbo].[Shop_Contain]
--
PRINT (N'Create foreign key [fk7] on table [dbo].[Shop_Contain]')
GO
ALTER TABLE dbo.Shop_Contain
  ADD CONSTRAINT fk7 FOREIGN KEY (sorder_id) REFERENCES dbo.Shop_Order (sorder_id)
GO

--
-- Create foreign key [fk1] on table [dbo].[Customer_Order]
--
PRINT (N'Create foreign key [fk1] on table [dbo].[Customer_Order]')
GO
ALTER TABLE dbo.Customer_Order
  ADD CONSTRAINT fk1 FOREIGN KEY (customer_id) REFERENCES dbo.Customer (customer_id)
GO

--
-- Create foreign key [fk2] on table [dbo].[Customer_Order]
--
PRINT (N'Create foreign key [fk2] on table [dbo].[Customer_Order]')
GO
ALTER TABLE dbo.Customer_Order
  ADD CONSTRAINT fk2 FOREIGN KEY (staff_id) REFERENCES dbo.Sales_Assistant (staff_id)
GO

--
-- Create foreign key [fk6] on table [dbo].[Customer_Contain]
--
PRINT (N'Create foreign key [fk6] on table [dbo].[Customer_Contain]')
GO
ALTER TABLE dbo.Customer_Contain
  ADD CONSTRAINT fk6 FOREIGN KEY (product_id) REFERENCES dbo.Product (product_id)
GO

--
-- Create foreign key [fk8] on table [dbo].[Customer_Contain]
--
PRINT (N'Create foreign key [fk8] on table [dbo].[Customer_Contain]')
GO
ALTER TABLE dbo.Customer_Contain
  ADD CONSTRAINT fk8 FOREIGN KEY (corder_id) REFERENCES dbo.Customer_Order (corder_id)
GO
SET NOEXEC OFF
GO

CREATE PROCEDURE TASK51 
AS
  BEGIN

    --------------------------------------------------------- SECTION 2 -------------------------------------------------------------

    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (1, 'Jennifer', 'Smith', '123 Main St, Cityville', 'F', 'j.smith@example.com', '123-456-7890');
  
    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (2, 'Michael', 'Johnson', '456 Elm St, Townsville', 'M', 'm.johnson@example.com', '987-654-3210');
    
    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (3, 'Stephanie', 'Brown', '789 Oak St, Villageton', 'F', 's.brown@example.com', '111-222-3333');
    
    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (4, 'Christopher', 'Lee', '101 Pine St, Hamletville', 'M', 'c.lee@example.com', '444-555-6666');
    
    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (5, 'Amanda', 'Garcia', '555 Maple St, Riverside', 'F', 'a.garcia@example.com', '777-888-9999');
    
    INSERT INTO Customer (customer_id, fname, lname, customer_address, GEnder, email, phoneNumber)
    VALUES (6, 'Matthew', 'Martinez', '777 Cedar St, Hilltop', 'M', 'm.martinez@example.com', '123-789-4560');

    --------------------------------------------------------- SECTION 3 -------------------------------------------------------------

    SELECT c.fname AS [Before Update] FROM Customer c; 
    
    UPDATE Customer
    SET fname = CONCAT(LEFT(fname, 2), SUBSTRING('(updated been has column this)', 2, 7));

    SELECT c.fname AS [After Update] FROM Customer c; 
    
    --------------------------------------------------------- SECTION 3 -------------------------------------------------------------

    CREATE TABLE TASK51Logs (
        id INT PRIMARY KEY IDENTITY,
        logdate DATETIME2,
        content VARCHAR(256)
    );

    --------------------------------------------------------- SECTION 4 -------------------------------------------------------------

    DECLARE @UpdatedRowsCount INT;
    
    UPDATE Customer
    SET FName = '-'
    WHERE FName LIKE '%updated%';
    
    SET @UpdatedRowsCount = @@ROWCOUNT;
    
    DELETE FROM Customer
    WHERE FName = '-';
    
    DECLARE @CurrentUser NVARCHAR(100);
    SET @CurrentUser = SUSER_SNAME();
    
    DECLARE @CurrentDateTime DATETIME2 = GETDATE();
    
    INSERT INTO TASK51Logs (logdate, content)
    VALUES (@CurrentDateTime, 'User: ' + @CurrentUser + '. Number of rows where "updated" was found and deleted: ' + CAST(@UpdatedRowsCount AS VARCHAR(10)));

    SELECT * FROM TASK51Logs tl;

    --------------------------------------------------------- TEAR DOWN -------------------------------------------------------------
    DELETE FROM Customer;
    DROP TABLE TASK51Logs;
  END

CREATE PROCEDURE TASK52
AS
BEGIN

  CREATE TABLE Task52User (
    ID INT PRIMARY KEY IDENTITY,
    username VARCHAR(256),
    password VARBINARY(MAX)
  );


  INSERT INTO Task52User (username, password)
  VALUES ('user1', ENCRYPTBYPASSPHRASE('Passphrase', 'password1')),
         ('user2', ENCRYPTBYPASSPHRASE('Passphrase', 'password2')),
         ('user3', ENCRYPTBYPASSPHRASE('Passphrase', 'password3'));

  SELECT * FROM Task52User tu;

  EXEC('CREATE VIEW viewtask52
    WITH ENCRYPTION
    AS
    SELECT ID, username, CONVERT(VARCHAR(MAX), DECRYPTBYPASSPHRASE(''Passphrase'', password)) AS decrypted_password
    FROM Task52User;');

  SELECT * FROM viewtask52;

  DROP TABLE Task52User;
  DROP VIEW viewtask52;

END

CREATE PROCEDURE TASK6_1
AS
BEGIN
-------------------------------------------------- TABLE CREATIONS --------------------------------------------------
  CREATE TABLE Task61Orders (
      OrderId INT PRIMARY KEY IDENTITY(1,1),
      CustomerID INT,
      Date DateTime2,
      Status NVARCHAR(50)
  );
  

  CREATE TABLE Task61OrderDetails (
      OrderDetailId INT PRIMARY KEY IDENTITY(1,1),
      OrderId INT FOREIGN KEY REFERENCES Task61Orders(OrderId),
      ProductId INT,
      Quantity INT
  );
  

  CREATE TABLE Task61Logs (
      LogID INT PRIMARY KEY IDENTITY(1,1),
      LogDate DATETIME2,
      Content NVARCHAR(4000)
  );
  
-------------------------------------------------- DATA INSERTIONS --------------------------------------------------
  INSERT INTO Task61Orders (CustomerID, Date, Status) VALUES
  (1, '2024-05-20 10:00:00', 'Pending'),
  (2, '2024-05-21 11:30:00', 'Completed'),
  (3, '2024-05-22 12:45:00', 'Low'),
  (4, '2024-05-23 09:15:00', 'Low'),
  (5, '2024-05-24 14:00:00', 'Medium');
  
  INSERT INTO Task61OrderDetails (OrderId, ProductId, Quantity) VALUES
  (1, 101, 5),
  (1, 102, 10),
  (2, 103, 10),
  (2, 104, 20),
  (3, 105, 15),
  (3, 106, 40),
  (4, 107, 5),
  (4, 108, 30),
  (5, 109, 25),
  (5, 110, 80);
  
  INSERT INTO Task61Logs (LogDate, Content) VALUES
  ('2024-05-20 10:10:00', 'Order 1 created'),
  ('2024-05-21 11:40:00', 'Order 2 completed'),
  ('2024-05-22 12:50:00', 'Order 3 created'),
  ('2024-05-23 09:20:00', 'Order 4 created'),
  ('2024-05-24 14:10:00', 'Order 5 created');
  
  SELECT * FROM Task61Orders [to];
  SELECT * FROM Task61OrderDetails tod;
  SELECT * FROM Task61Logs tl;

-------------------------------------------------- LOG MESSAGE BEFORE TRANSACTION --------------------------------------------------
    DECLARE @LogMessage NVARCHAR(4000);

    SET @LogMessage = 'Task 61 operation started at ' + CONVERT(NVARCHAR, GETDATE(), 120);
 -------------------------------------------------- UPDATE TRANSACTION --------------------------------------------------
    BEGIN TRANSACTION;
    BEGIN TRY

        INSERT INTO Task61Logs (LogDate, Content)
        VALUES (GETDATE(), @LogMessage);
        PRINT @LogMessage;
        SELECT * FROM Task61Logs tl

        SAVE TRANSACTION Log;

        SELECT * FROM Task61Orders [to];
        UPDATE o
        SET o.Status = 'High'
        FROM Task61Orders o
        JOIN (
            SELECT OrderId, SUM(Quantity) AS TotalQuantity
            FROM Task61OrderDetails
            GROUP BY OrderId
        ) d ON o.OrderId = d.OrderId
        WHERE d.TotalQuantity > 100;

        SELECT * FROM Task61Orders [to];

        PRINT 1 / 0;

 -------------------------------------------------- COMMIT TRANSACTION --------------------------------------------------
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION Log;
        COMMIT TRANSACTION Log;

 -------------------------------------------------- ERROR DETAILS INSERTION AND PRINT --------------------------------------------------       
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorState NVARCHAR(50);
        DECLARE @ErrorSeverity NVARCHAR(50);
        DECLARE @ErrorNumber NVARCHAR(50);
        DECLARE @ErrorLine NVARCHAR(50);
        DECLARE @ErrorContent NVARCHAR(4000);

        SET @ErrorMessage = ERROR_MESSAGE();
        SET @ErrorState = CAST(ERROR_STATE() AS NVARCHAR(50));
        SET @ErrorSeverity = CAST(ERROR_SEVERITY() AS NVARCHAR(50));
        SET @ErrorNumber = CAST(ERROR_NUMBER() AS NVARCHAR(50));
        SET @ErrorLine = CAST(ERROR_LINE() AS NVARCHAR(50));

        SET @ErrorContent = 'Task 61 errors: Error: ' + @ErrorMessage 
            + ' Error State: ' + @ErrorState 
            + ' Error Code: ' + @ErrorNumber 
            + ' Error Severity: ' + @ErrorSeverity 
            + ' Error Line: ' + @ErrorLine;

        INSERT INTO Task61Logs (LogDate, Content)
        VALUES (GETDATE(), @ErrorContent);

        PRINT @ErrorContent;
    END CATCH

    SELECT * FROM Task61Orders [to];
    SELECT * FROM Task61Logs tl;
    -------------------------------------------------- TEAR DOWN --------------------------------------------------
    DROP TABLE Task61Logs;
    DROP TABLE Task61OrderDetails;
    DROP TABLE Task61Orders;
END;

CREATE PROCEDURE TASK71
WITH ENCRYPTION
AS
BEGIN
  -- Start a transaction
  BEGIN TRANSACTION;

  BEGIN TRY
    -- Define the allowed username
    DECLARE @AllowedUsername NVARCHAR(128) = 'DESKTOP-JRVNIQ3\Mohammad-PC';

    -- Check if the current user is the allowed user
    IF SUSER_NAME() <> @AllowedUsername
    BEGIN
        RAISERROR('You do not have permission to execute this stored procedure.', 16, 1);
        RETURN;
    END

    -- Create table Task71_StoreSales_1
    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Task71_StoreSales_1')
    BEGIN
        CREATE TABLE Task71_StoreSales_1 (
            ProductID INT IDENTITY(1,2) PRIMARY KEY, 
            SalesDate DATETIME2,
            Amount DECIMAL(10,2)
        );
    END
    
    -- Create table Task71_StoreSales_2
    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Task71_StoreSales_2')
    BEGIN
        CREATE TABLE Task71_StoreSales_2 (
            ProductID INT IDENTITY(2,2) PRIMARY KEY, 
            SalesDate DATETIME2,
            Amount DECIMAL(10,2)
        );
    END
    
    -- Create table TASK71_MontlySalesReport
    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'TASK71_MontlySalesReport')
    BEGIN
        CREATE TABLE TASK71_MontlySalesReport (
            ReportMonth DATETIME2,
            ProductID INT,
            TotalAmount DECIMAL(10,2),
            PRIMARY KEY (ReportMonth, ProductID)
        );
    END

    -- Insert data into Task71_StoreSales_1
    INSERT INTO Task71_StoreSales_1 (SalesDate, Amount)
    VALUES
    ('2024-05-01', 100.00),
    ('2024-05-02', 150.50),
    ('2024-05-03', 200.75);

    -- Insert data into Task71_StoreSales_2
    INSERT INTO Task71_StoreSales_2 (SalesDate, Amount)
    VALUES
    ('2024-05-01', 120.00),
    ('2024-05-02', 180.50),
    ('2024-05-03', 220.75);

    -- Create a temporary table to store the aggregated report data
    CREATE TABLE #TempMonthlySalesReport (
        ReportMonth DATETIME2,
        ProductID INT,
        TotalAmount DECIMAL(10,2)
    );

    -- Insert aggregated data into the temporary table
    INSERT INTO #TempMonthlySalesReport (ReportMonth, ProductID, TotalAmount)
    SELECT CAST(SalesDate AS DATE) AS ReportMonth, ProductID, SUM(Amount) AS TotalAmount
    FROM (
        SELECT SalesDate, ProductID, Amount FROM Task71_StoreSales_1
        UNION ALL
        SELECT SalesDate, ProductID, Amount FROM Task71_StoreSales_2
    ) AS Sales
    GROUP BY CAST(SalesDate AS DATE), ProductID;

    -- Declare a cursor for the temporary table
    DECLARE cur CURSOR FOR
    SELECT ReportMonth, ProductID, TotalAmount
    FROM #TempMonthlySalesReport;

    -- Variables to hold cursor data
    DECLARE @ReportMonth DATETIME2;
    DECLARE @ProductID INT;
    DECLARE @TotalAmount DECIMAL(10,2);

    -- Open the cursor
    OPEN cur;
    PRINT 1/0;
    -- Fetch the first row
    FETCH NEXT FROM cur INTO @ReportMonth, @ProductID, @TotalAmount;

    -- Loop through the cursor rows
    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Check if the ProductID exists in either of the sales tables
        IF NOT EXISTS (
            SELECT 1 
            FROM Task71_StoreSales_1 t1
            WHERE t1.ProductID = @ProductID
        )
        AND NOT EXISTS (
            SELECT 1 
            FROM Task71_StoreSales_2 t2
            WHERE t2.ProductID = @ProductID
        )
        BEGIN
            -- Raise an error if the ProductID does not exist in either table
            RAISERROR ('ProductID %d does not exist in either Task71_StoreSales_1 or Task71_StoreSales_2', 16, 1, @ProductID);
            -- Skip to the next row
            FETCH NEXT FROM cur INTO @ReportMonth, @ProductID, @TotalAmount;
            CONTINUE;
        END

        -- Insert the valid row into TASK71_MontlySalesReport
        -- If a duplicate key violation occurs, update the existing row
        BEGIN TRY
            INSERT INTO TASK71_MontlySalesReport (ReportMonth, ProductID, TotalAmount)
            VALUES (@ReportMonth, @ProductID, @TotalAmount);
        END TRY
        BEGIN CATCH
            IF ERROR_NUMBER() = 2627 -- Primary key violation
            BEGIN
                UPDATE TASK71_MontlySalesReport
                SET TotalAmount = TotalAmount + @TotalAmount
                WHERE ReportMonth = @ReportMonth AND ProductID = @ProductID;
            END
            ELSE
            BEGIN
                -- Re-raise the error if it's not a primary key violation
                THROW;
            END
        END CATCH;

        -- Fetch the next row
        FETCH NEXT FROM cur INTO @ReportMonth, @ProductID, @TotalAmount;
    END;

    -- Close and deallocate the cursor
    CLOSE cur;
    DEALLOCATE cur;

    -- Drop the temporary table
    DROP TABLE #TempMonthlySalesReport;

    -- Commit the transaction
    COMMIT TRANSACTION;
  END TRY
  BEGIN CATCH
    -- Rollback the transaction in case of error
    ROLLBACK TRANSACTION;

    -- Return default error message
    RAISERROR ('Error occurred when running the procedure.', 16, 1);
  END CATCH;
END
GO